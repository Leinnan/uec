name: Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: Pass the version
        required: true
        type: string
      dry_run:
        description: Perform test without releasing
        type: choice
        required: true
        default: "true"
        options:
          - "true"
          - "false"  
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  setup:
    name: Prepare job settings
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setup.outputs.version }}
      dry_run: ${{ steps.setup.outputs.dry_run }}
    steps:

      - name: Get the release version from the tag
        id: version_push
        shell: bash
        if: ${{ github.event_name == 'push' }}
        run: |
          echo version=${GITHUB_REF#refs/tags/} >> $GITHUB_OUTPUT
      - name: Get the release version from the input
        id: version_dispatch
        shell: bash
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo version=$(echo ${{ inputs.version }} | xargs) >> $GITHUB_OUTPUT
          echo dry_run=$(echo ${{ inputs.dry_run }} | xargs) >> $GITHUB_OUTPUT
      - name: Setup
        id: setup
        shell: bash
        run: |
          echo version::$(if [ -n "${{ steps.version_dispatch.outputs.version }}" ]; then echo "${{ steps.version_dispatch.outputs.version }}"; else echo "${{ steps.version_push.outputs.version }}"; fi) >> $GITHUB_OUTPUT
          echo dry_run::$(if [ -n "${{ steps.version_dispatch.outputs.dry_run }}" ]; then echo "${{ steps.version_dispatch.outputs.dry_run }}"; else echo "false"; fi) >> $GITHUB_OUTPUT
      - name: Display settings
        shell: bash
        run: echo "Version ${{ steps.setup.outputs.version }}, Dry run- ${{ steps.setup.outputs.dry_run }}"
      - name: Validate input
        shell: bash
        run: |
          if [ -z "${{ steps.setup.outputs.version }}" ]; then exit 1; fi;
          if [ -z "${{ steps.setup.outputs.dry_run }}" ]; then exit 1; fi;
          if [[ "${{ steps.setup.outputs.version }}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+).*?$ ]]; then echo "Valid version"; else echo "INVALID VERSION FORMAT!";exit 1; fi;
  build-and-upload:
    name: Build and upload
    needs:
      - setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        id: archive
        shell: bash
        run: |
          binary_name="uec"

          dirname="$binary_name-${{ needs.setup.outputs.version }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "asset=$dirname.zip" >> $GITHUB_OUTPUT
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "asset=$dirname.tar.gz" >> $GITHUB_OUTPUT
          fi

      - name: Extract changelog content
        id: extract_changelog
        shell: bash
        run: |
          version="${{ needs.setup.outputs.version }}"
          git tag -l --format='%(contents)' ${{ needs.setup.outputs.version }} > changelog_output.txt
          awk "/^## \\[$version\\]/ {flag=1; next} /^## \\[/ && flag {flag=0} flag" CHANGELOG.md >> changelog_output.txt

      - name: Display extracted content
        run: cat changelog_output.txt
      - name: Release
        if: ${{ needs.setup.outputs.dry_run == 'false'}}
        uses: softprops/action-gh-release@v2
        with:
          body_path: changelog_output.txt
          files: |
            ${{ steps.archive.outputs.ASSET }}
  deploy-to-crates-io:
    needs:
      - setup
      - build-and-upload
    name: Deploy to crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-release
      - name: cargo publish dry run
        if: ${{ needs.setup.outputs.dry_run == 'false'}}
        run: cargo publish --dry-run
      - name: cargo login
        if: ${{ needs.setup.outputs.dry_run == 'false'}}
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      - name: "cargo release publish"
        if: ${{ needs.setup.outputs.dry_run == 'false'}}
        run: |-
          cargo release \
            publish \
            --workspace \
            --all-features \
            --allow-branch HEAD \
            --no-confirm \
            --no-verify \
            --execute
  msi:
    needs:
      - setup
      - build-and-upload
    name: Deploy to winget
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: rustup
        uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-wix
      - run: cargo wix --nocapture
      - name: upload artifact
        if: ${{ needs.setup.outputs.dry_run == 'false'}}
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: target/wix/*.msi
      - name: publish to gh-releases
        if: ${{ needs.setup.outputs.dry_run == 'false'}}
        uses: softprops/action-gh-release@v2
        with:
          files: target/wix/*.msi
      - name: publish to WinGet
        if: ${{ needs.setup.outputs.dry_run == 'false'}}
        run: .\winget-publish.ps1 ${{ needs.setup.outputs.version }} ${env:GH_PERSONAL_TOKEN}
        env:
          # We cannot use GITHUB_TOKEN here because it doesn't have permission to work with winget-pkgs repository fork
          GH_PERSONAL_TOKEN: ${{ secrets.GH_PERSONAL_TOKEN }}
